{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\romav\\\\WebstormProjects\\\\react\\\\src\\\\components\\\\MyArea\\\\MyArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyTextArea() {\n  _s();\n  const [text, setText] = useState(''); // Состояние для текста в <textarea>\n  const [fileInput, setFileInput] = useState(null); // Состояние для input файла\n\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    // Проверка типа файла\n    if (file && isAllowedFileType(file.type)) {\n      setFileInput(file);\n    } else {\n      // Обработка недопустимого файла\n      alert('Пожалуйста, выберите допустимый файл');\n    }\n  };\n\n  // Функция для проверки допустимых типов файлов\n  const isAllowedFileType = fileType => {\n    const allowedTypes = ['text/plain', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint', 'application/vnd.ms-excel', 'application/msword', 'application/pdf', '.doc', '.docx', '.csv', '.rtf', '.txt', '.pdf', '.zip'];\n    return allowedTypes.includes(fileType);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Text:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Upload File:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".doc, .docx, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, .csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf, .rtf, .txt, .pdf, .zip\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"placeholder\",\n      children: \"Placeholder Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(MyTextArea, \"P+s/dkiW6zRZEEN/Z/SvwQIn1iM=\");\n_c = MyTextArea;\nexport default MyTextArea;\nvar _c;\n$RefreshReg$(_c, \"MyTextArea\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MyTextArea","_s","text","setText","fileInput","setFileInput","handleTextChange","event","target","value","handleFileChange","file","files","isAllowedFileType","type","alert","fileType","allowedTypes","includes","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","accept","className","_c","$RefreshReg$"],"sources":["C:/Users/romav/WebstormProjects/react/src/components/MyArea/MyArea.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction MyTextArea() {\r\n    const [text, setText] = useState(''); // Состояние для текста в <textarea>\r\n    const [fileInput, setFileInput] = useState(null); // Состояние для input файла\r\n\r\n    const handleTextChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        // Проверка типа файла\r\n        if (file && isAllowedFileType(file.type)) {\r\n            setFileInput(file);\r\n        } else {\r\n            // Обработка недопустимого файла\r\n            alert('Пожалуйста, выберите допустимый файл');\r\n        }\r\n    };\r\n\r\n    // Функция для проверки допустимых типов файлов\r\n    const isAllowedFileType = (fileType) => {\r\n        const allowedTypes = [\r\n            'text/plain',\r\n            'application/pdf',\r\n            'application/msword',\r\n            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n            'application/vnd.ms-excel',\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n            'application/vnd.ms-powerpoint',\r\n            'application/vnd.ms-excel',\r\n            'application/msword',\r\n            'application/pdf',\r\n            '.doc',\r\n            '.docx',\r\n            '.csv',\r\n            '.rtf',\r\n            '.txt',\r\n            '.pdf',\r\n            '.zip',\r\n        ];\r\n        return allowedTypes.includes(fileType);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>\r\n                Text:\r\n                <textarea value={text} onChange={handleTextChange} />\r\n            </label>\r\n            <label>\r\n                Upload File:\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\".doc, .docx, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, .csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf, .rtf, .txt, .pdf, .zip\"\r\n                    onChange={handleFileChange}\r\n                />\r\n            </label>\r\n            <span className=\"placeholder\">Placeholder Text</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyTextArea;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD,MAAMS,gBAAgB,GAAIC,KAAK,IAAK;IAChCJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,gBAAgB,GAAIH,KAAK,IAAK;IAChC,MAAMI,IAAI,GAAGJ,KAAK,CAACC,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC;IAClC;IACA,IAAID,IAAI,IAAIE,iBAAiB,CAACF,IAAI,CAACG,IAAI,CAAC,EAAE;MACtCT,YAAY,CAACM,IAAI,CAAC;IACtB,CAAC,MAAM;MACH;MACAI,KAAK,CAAC,sCAAsC,CAAC;IACjD;EACJ,CAAC;;EAED;EACA,MAAMF,iBAAiB,GAAIG,QAAQ,IAAK;IACpC,MAAMC,YAAY,GAAG,CACjB,YAAY,EACZ,iBAAiB,EACjB,oBAAoB,EACpB,yEAAyE,EACzE,0BAA0B,EAC1B,mEAAmE,EACnE,+BAA+B,EAC/B,0BAA0B,EAC1B,oBAAoB,EACpB,iBAAiB,EACjB,MAAM,EACN,OAAO,EACP,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,CACT;IACD,OAAOA,YAAY,CAACC,QAAQ,CAACF,QAAQ,CAAC;EAC1C,CAAC;EAED,oBACIjB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,GAAO,OAEH,eAAApB,OAAA;QAAUU,KAAK,EAAEP,IAAK;QAACkB,QAAQ,EAAEd;MAAiB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACRzB,OAAA;MAAAoB,QAAA,GAAO,cAEH,eAAApB,OAAA;QACIe,IAAI,EAAC,MAAM;QACXW,MAAM,EAAC,+UAA+U;QACtVL,QAAQ,EAAEV;MAAiB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACRzB,OAAA;MAAM2B,SAAS,EAAC,aAAa;MAAAP,QAAA,EAAC;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAACvB,EAAA,CA5DQD,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AA8DnB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}